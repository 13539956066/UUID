/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaojing.uuid.bean;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-26")
public class Interval implements org.apache.thrift.TBase<Interval, Interval._Fields>, java.io.Serializable, Cloneable, Comparable<Interval> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Interval");

  private static final org.apache.thrift.protocol.TField DATA_CENTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataCenterId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_CENTER_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataCenterBits", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WORKER_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("workerBits", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SEQUENCE_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceBits", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IntervalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IntervalTupleSchemeFactory());
  }

  public int dataCenterId; // required
  public int workerId; // required
  public long startTime; // required
  public long endTime; // required
  public int dataCenterBits; // required
  public int workerBits; // required
  public int sequenceBits; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_CENTER_ID((short)1, "dataCenterId"),
    WORKER_ID((short)2, "workerId"),
    START_TIME((short)3, "startTime"),
    END_TIME((short)4, "endTime"),
    DATA_CENTER_BITS((short)5, "dataCenterBits"),
    WORKER_BITS((short)6, "workerBits"),
    SEQUENCE_BITS((short)7, "sequenceBits");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_CENTER_ID
          return DATA_CENTER_ID;
        case 2: // WORKER_ID
          return WORKER_ID;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // DATA_CENTER_BITS
          return DATA_CENTER_BITS;
        case 6: // WORKER_BITS
          return WORKER_BITS;
        case 7: // SEQUENCE_BITS
          return SEQUENCE_BITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATACENTERID_ISSET_ID = 0;
  private static final int __WORKERID_ISSET_ID = 1;
  private static final int __STARTTIME_ISSET_ID = 2;
  private static final int __ENDTIME_ISSET_ID = 3;
  private static final int __DATACENTERBITS_ISSET_ID = 4;
  private static final int __WORKERBITS_ISSET_ID = 5;
  private static final int __SEQUENCEBITS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_CENTER_ID, new org.apache.thrift.meta_data.FieldMetaData("dataCenterId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_CENTER_BITS, new org.apache.thrift.meta_data.FieldMetaData("dataCenterBits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKER_BITS, new org.apache.thrift.meta_data.FieldMetaData("workerBits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQUENCE_BITS, new org.apache.thrift.meta_data.FieldMetaData("sequenceBits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Interval.class, metaDataMap);
  }

  public Interval() {
  }

  public Interval(
    int dataCenterId,
    int workerId,
    long startTime,
    long endTime,
    int dataCenterBits,
    int workerBits,
    int sequenceBits)
  {
    this();
    this.dataCenterId = dataCenterId;
    setDataCenterIdIsSet(true);
    this.workerId = workerId;
    setWorkerIdIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.dataCenterBits = dataCenterBits;
    setDataCenterBitsIsSet(true);
    this.workerBits = workerBits;
    setWorkerBitsIsSet(true);
    this.sequenceBits = sequenceBits;
    setSequenceBitsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Interval(Interval other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dataCenterId = other.dataCenterId;
    this.workerId = other.workerId;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.dataCenterBits = other.dataCenterBits;
    this.workerBits = other.workerBits;
    this.sequenceBits = other.sequenceBits;
  }

  public Interval deepCopy() {
    return new Interval(this);
  }

  @Override
  public void clear() {
    setDataCenterIdIsSet(false);
    this.dataCenterId = 0;
    setWorkerIdIsSet(false);
    this.workerId = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setDataCenterBitsIsSet(false);
    this.dataCenterBits = 0;
    setWorkerBitsIsSet(false);
    this.workerBits = 0;
    setSequenceBitsIsSet(false);
    this.sequenceBits = 0;
  }

  public int getDataCenterId() {
    return this.dataCenterId;
  }

  public Interval setDataCenterId(int dataCenterId) {
    this.dataCenterId = dataCenterId;
    setDataCenterIdIsSet(true);
    return this;
  }

  public void unsetDataCenterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATACENTERID_ISSET_ID);
  }

  /** Returns true if field dataCenterId is set (has been assigned a value) and false otherwise */
  public boolean isSetDataCenterId() {
    return EncodingUtils.testBit(__isset_bitfield, __DATACENTERID_ISSET_ID);
  }

  public void setDataCenterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATACENTERID_ISSET_ID, value);
  }

  public int getWorkerId() {
    return this.workerId;
  }

  public Interval setWorkerId(int workerId) {
    this.workerId = workerId;
    setWorkerIdIsSet(true);
    return this;
  }

  public void unsetWorkerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
  }

  /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerId() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
  }

  public void setWorkerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public Interval setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public Interval setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getDataCenterBits() {
    return this.dataCenterBits;
  }

  public Interval setDataCenterBits(int dataCenterBits) {
    this.dataCenterBits = dataCenterBits;
    setDataCenterBitsIsSet(true);
    return this;
  }

  public void unsetDataCenterBits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATACENTERBITS_ISSET_ID);
  }

  /** Returns true if field dataCenterBits is set (has been assigned a value) and false otherwise */
  public boolean isSetDataCenterBits() {
    return EncodingUtils.testBit(__isset_bitfield, __DATACENTERBITS_ISSET_ID);
  }

  public void setDataCenterBitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATACENTERBITS_ISSET_ID, value);
  }

  public int getWorkerBits() {
    return this.workerBits;
  }

  public Interval setWorkerBits(int workerBits) {
    this.workerBits = workerBits;
    setWorkerBitsIsSet(true);
    return this;
  }

  public void unsetWorkerBits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERBITS_ISSET_ID);
  }

  /** Returns true if field workerBits is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerBits() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKERBITS_ISSET_ID);
  }

  public void setWorkerBitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERBITS_ISSET_ID, value);
  }

  public int getSequenceBits() {
    return this.sequenceBits;
  }

  public Interval setSequenceBits(int sequenceBits) {
    this.sequenceBits = sequenceBits;
    setSequenceBitsIsSet(true);
    return this;
  }

  public void unsetSequenceBits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCEBITS_ISSET_ID);
  }

  /** Returns true if field sequenceBits is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceBits() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCEBITS_ISSET_ID);
  }

  public void setSequenceBitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCEBITS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_CENTER_ID:
      if (value == null) {
        unsetDataCenterId();
      } else {
        setDataCenterId((Integer)value);
      }
      break;

    case WORKER_ID:
      if (value == null) {
        unsetWorkerId();
      } else {
        setWorkerId((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case DATA_CENTER_BITS:
      if (value == null) {
        unsetDataCenterBits();
      } else {
        setDataCenterBits((Integer)value);
      }
      break;

    case WORKER_BITS:
      if (value == null) {
        unsetWorkerBits();
      } else {
        setWorkerBits((Integer)value);
      }
      break;

    case SEQUENCE_BITS:
      if (value == null) {
        unsetSequenceBits();
      } else {
        setSequenceBits((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_CENTER_ID:
      return Integer.valueOf(getDataCenterId());

    case WORKER_ID:
      return Integer.valueOf(getWorkerId());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case DATA_CENTER_BITS:
      return Integer.valueOf(getDataCenterBits());

    case WORKER_BITS:
      return Integer.valueOf(getWorkerBits());

    case SEQUENCE_BITS:
      return Integer.valueOf(getSequenceBits());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_CENTER_ID:
      return isSetDataCenterId();
    case WORKER_ID:
      return isSetWorkerId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case DATA_CENTER_BITS:
      return isSetDataCenterBits();
    case WORKER_BITS:
      return isSetWorkerBits();
    case SEQUENCE_BITS:
      return isSetSequenceBits();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Interval)
      return this.equals((Interval)that);
    return false;
  }

  public boolean equals(Interval that) {
    if (that == null)
      return false;

    boolean this_present_dataCenterId = true;
    boolean that_present_dataCenterId = true;
    if (this_present_dataCenterId || that_present_dataCenterId) {
      if (!(this_present_dataCenterId && that_present_dataCenterId))
        return false;
      if (this.dataCenterId != that.dataCenterId)
        return false;
    }

    boolean this_present_workerId = true;
    boolean that_present_workerId = true;
    if (this_present_workerId || that_present_workerId) {
      if (!(this_present_workerId && that_present_workerId))
        return false;
      if (this.workerId != that.workerId)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_dataCenterBits = true;
    boolean that_present_dataCenterBits = true;
    if (this_present_dataCenterBits || that_present_dataCenterBits) {
      if (!(this_present_dataCenterBits && that_present_dataCenterBits))
        return false;
      if (this.dataCenterBits != that.dataCenterBits)
        return false;
    }

    boolean this_present_workerBits = true;
    boolean that_present_workerBits = true;
    if (this_present_workerBits || that_present_workerBits) {
      if (!(this_present_workerBits && that_present_workerBits))
        return false;
      if (this.workerBits != that.workerBits)
        return false;
    }

    boolean this_present_sequenceBits = true;
    boolean that_present_sequenceBits = true;
    if (this_present_sequenceBits || that_present_sequenceBits) {
      if (!(this_present_sequenceBits && that_present_sequenceBits))
        return false;
      if (this.sequenceBits != that.sequenceBits)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dataCenterId = true;
    list.add(present_dataCenterId);
    if (present_dataCenterId)
      list.add(dataCenterId);

    boolean present_workerId = true;
    list.add(present_workerId);
    if (present_workerId)
      list.add(workerId);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_dataCenterBits = true;
    list.add(present_dataCenterBits);
    if (present_dataCenterBits)
      list.add(dataCenterBits);

    boolean present_workerBits = true;
    list.add(present_workerBits);
    if (present_workerBits)
      list.add(workerBits);

    boolean present_sequenceBits = true;
    list.add(present_sequenceBits);
    if (present_sequenceBits)
      list.add(sequenceBits);

    return list.hashCode();
  }

  @Override
  public int compareTo(Interval other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDataCenterId()).compareTo(other.isSetDataCenterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataCenterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataCenterId, other.dataCenterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(other.isSetWorkerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, other.workerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataCenterBits()).compareTo(other.isSetDataCenterBits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataCenterBits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataCenterBits, other.dataCenterBits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkerBits()).compareTo(other.isSetWorkerBits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerBits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerBits, other.workerBits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceBits()).compareTo(other.isSetSequenceBits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceBits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceBits, other.sequenceBits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Interval(");
    boolean first = true;

    sb.append("dataCenterId:");
    sb.append(this.dataCenterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workerId:");
    sb.append(this.workerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataCenterBits:");
    sb.append(this.dataCenterBits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workerBits:");
    sb.append(this.workerBits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequenceBits:");
    sb.append(this.sequenceBits);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'dataCenterId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'workerId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dataCenterBits' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'workerBits' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sequenceBits' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntervalStandardSchemeFactory implements SchemeFactory {
    public IntervalStandardScheme getScheme() {
      return new IntervalStandardScheme();
    }
  }

  private static class IntervalStandardScheme extends StandardScheme<Interval> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Interval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_CENTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataCenterId = iprot.readI32();
              struct.setDataCenterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workerId = iprot.readI32();
              struct.setWorkerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA_CENTER_BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataCenterBits = iprot.readI32();
              struct.setDataCenterBitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WORKER_BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workerBits = iprot.readI32();
              struct.setWorkerBitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEQUENCE_BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceBits = iprot.readI32();
              struct.setSequenceBitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDataCenterId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataCenterId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWorkerId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'workerId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDataCenterBits()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataCenterBits' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWorkerBits()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'workerBits' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSequenceBits()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceBits' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Interval struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DATA_CENTER_ID_FIELD_DESC);
      oprot.writeI32(struct.dataCenterId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
      oprot.writeI32(struct.workerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_CENTER_BITS_FIELD_DESC);
      oprot.writeI32(struct.dataCenterBits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORKER_BITS_FIELD_DESC);
      oprot.writeI32(struct.workerBits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQUENCE_BITS_FIELD_DESC);
      oprot.writeI32(struct.sequenceBits);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntervalTupleSchemeFactory implements SchemeFactory {
    public IntervalTupleScheme getScheme() {
      return new IntervalTupleScheme();
    }
  }

  private static class IntervalTupleScheme extends TupleScheme<Interval> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Interval struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.dataCenterId);
      oprot.writeI32(struct.workerId);
      oprot.writeI64(struct.startTime);
      oprot.writeI64(struct.endTime);
      oprot.writeI32(struct.dataCenterBits);
      oprot.writeI32(struct.workerBits);
      oprot.writeI32(struct.sequenceBits);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Interval struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dataCenterId = iprot.readI32();
      struct.setDataCenterIdIsSet(true);
      struct.workerId = iprot.readI32();
      struct.setWorkerIdIsSet(true);
      struct.startTime = iprot.readI64();
      struct.setStartTimeIsSet(true);
      struct.endTime = iprot.readI64();
      struct.setEndTimeIsSet(true);
      struct.dataCenterBits = iprot.readI32();
      struct.setDataCenterBitsIsSet(true);
      struct.workerBits = iprot.readI32();
      struct.setWorkerBitsIsSet(true);
      struct.sequenceBits = iprot.readI32();
      struct.setSequenceBitsIsSet(true);
    }
  }

}

